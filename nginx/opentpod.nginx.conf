# opentpod nginx site conf
# included by nginx.conf
upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    # server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # use localhost for cloudlet001 deployment.
    server opentpod:8000 fail_timeout=0;
}

server {
    # listen on port 80
    listen 80 deferred;

    client_max_body_size 1G;

    # where the root here
    # TODO: change this to a relative path for docker
    root /root/openTPOD/www;
    # what file to server as index
    index index.html index.htm;

    keepalive_timeout 5;

    location /api {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location /auth {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location /cvat-ui {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location /admin {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location /task_data {
        # checks for static file, if not found proxy to app
        try_files /nonexistent @proxy_to_app;
    }

    location /data {
        # checks for static file, if not found proxy to app
        try_files /nonexistent @proxy_to_app;
    }

    # xsendfile
    location /protected {
        internal;
        # TODO: change this for containers
        alias /home/junjuew/work/opentpod/var;
    }

    location ~ ^/static/(.*)$ {
        # static needs to configure two directories
        # as react build is generated offline
        # but CVAT uses django to render and generate files
        # into django static directory online
        try_files /static/$1 /django-static/$1 =404;
    }

    location @proxy_to_app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://app_server;
    }

    # redirect to index.html for client-side routing
    # without this, when a user hits refresh, the client-side does not
    # load react-router yet, therefore not able to render the correct view
    # https://tylermcginnis.com/react-router-cannot-get-url-refresh/
    location / {
        if (!-e $request_filename){
            rewrite ^(.*)$ /index.html break;
        }
    }
}
